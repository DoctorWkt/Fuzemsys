include ../../Target/rules.$(USERCPU)

OBJS1 = body.o declaration.o enum.o error.o expression.o header.o idxdata.o \
	initializer.o label.o lex.o main.o primary.o stackframe.o storage.o \
	struct.o switch.o symbol.o tree.o type.o type_iterator.o

INC1 = body.h compiler.h declaration.h enum.h error.h expression.h header.h \
	idxdata.h initializer.h label.h lex.h primary.h stackframe.h storage.h \
	struct.h symbol.h target.h token.h tree.h type.h type_iterator.h

.PHONY: support$(USERCPU)

CCROOT ?=/

CFLAGS+= -DLIBPATH="\"$(CCROOT)/lib\"" -DBINPATH="\"$(CCROOT)/bin\""

BINOBJ= fcc cc0 copt cc1.$(USERCPU) cc2.$(USERCPU)

all: $(BINOBJ)

%.o: %.c
	$(CC) $(CFLAGS) $(CCOPTS) -c $<

%: %.c
	$(CC) $(CFLAGS) $(CCOPTS) -c $<
	-$(LINKER) -o $@ $(CRT0) $*.o $(LINKER_TAIL) -m $@.map
	-rm $*.o

fcc: cc.c
	$(CC) $(CFLAGS) $(CCOPTS) -c $<
	-$(LINKER) -o $@ $(CRT0) cc.o $(LINKER_TAIL) -m $@.map
	-rm cc.o

cc0: frontend.c
	$(CC) $(CFLAGS) $(CCOPTS) -c $<
	-$(LINKER) -o $@ $(CRT0) frontend.o $(LINKER_TAIL) -m $@.map
	-rm frontend.o

$(OBJS1): $(INC1)

cc1.$(USERCPU): $(OBJS1) target-$(USERCPU).o
	-$(LINKER) -o $@ $(CRT0) $(OBJS1) target-$(USERCPU).o $(LINKER_TAIL) -m $@.map

cc2.$(USERCPU): backend.o backend-$(USERCPU).o
	-$(LINKER) -o $@ $(CRT0) backend.o backend-$(USERCPU).o $(LINKER_TAIL) -m $@.map

support$(USERCPU):
	(cd support$(USERCPU); make)

install: all
	cp $(BINOBJ) ../../build/$(USERCPU)/bin

clean:
	rm -f *.map *.o $(BINOBJ)
	(cd support$(USERCPU); make clean)
