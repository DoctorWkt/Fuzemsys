# 6809 Version
CC = /opt/fcc/bin/fcc -m6809
ASM = /opt/fcc/bin/as6809
AR = ar
CC_OPT = -c -O -D__m6809__
ASM_OPT = -o

SRC_CRT0 = 6809/crt0.s 6809/crt0nostdio.s
OBJ_CRT0 = $(SRC_CRT0:.s=.o)
#SRC_ASM = 6809/setjmp_6809.s 6809/ashlsi3_6809.s
SRC_ASM = 6809/syscalls.s 6809/setjmp_6809.s
OBJ_ASM = $(SRC_ASM:.s=.o)
SRC_C =  __argv.c abort.c accept.c aes256.c asctime.c asctime_r.c assert.c atexit.c
SRC_C += basename.c bcmp.c bcopy.c bind.c bsearch.c bzero.c
SRC_C += calloc.c cfree.c clock.c closedir.c
SRC_C += closedir_r.c clock_gettime.c clock_getres.c clock_settime.c
SRC_C += connect.c creat.c crypt.c ctermid.c ctime.c cuserid.c
SRC_C += dirname.c
SRC_C += err.c errno.c error.c
SRC_C += execl.c execv.c execvp.c exit.c
SRC_C += fclose.c fdatasync.c fgetc.c fgetgrent.c fgetpwent.c
SRC_C += fgetpos.c fgets.c fopen.c fork.c fprintf.c fputc.c fputs.c fread.c
SRC_C += fsetpos.c fsync.c ftell.c fwrite.c getcwd.c
SRC_C += getenv.c __getgrent.c getgrgid.c getgrnam.c getlogin.c
SRC_C += getopt.c getpeername.c
SRC_C += getpw.c __getpwent.c getpwnam.c getpwuid.c
SRC_C += gets.c getsockname.c gettimeofday.c
SRC_C += getw.c gmtime.c gmtime_r.c grent.c htons.c
SRC_C += inet_addr.c inet_aton.c inet_network.c inet_ntoa.c inet_ntop.c inet_pton.c
SRC_C += index.c initgroups.c isatty.c killpg.c
SRC_C += libintl.c listen.c
SRC_C += localtim.c localtim_r.c lseek.c lsearch.c lstat.c ltoa.c ltostr.c
SRC_C += malloc.c mkfifo.c mkstemps.c mntent.c nanosleep.c
SRC_C += opendir.c opendir_r.c pause.c perror.c
SRC_C += popen.c printf.c putenv.c putchar.c putpwent.c putw.c pwent.c qsort.c
SRC_C += raise.c rand.c readdir.c readlink.c realloc.c recvfrom.c regerror.c
SRC_C += regsub.c remount.c remove.c rewind.c rewinddir.c rindex.c 
SRC_C += rootmntent.c sendto.c seekdir.c setbuffer.c setenv.c
SRC_C += setlocale.c setvbuf.c settimeofday.c sgetl.c shutdown.c
SRC_C += sigdisp.c socket.c sprintf.c
SRC_C += sputl.c stat.c statvfs.c stdio0.c stime.c
SRC_C += strcasecmp.c strcasestr.c strdup.c stricmp.c strlcpy.c strncasecmp.c
SRC_C += strnlen.c strnicmp.c strsep.c strxfrm.c strcoll.c strsignal.c
SRC_C += strtod.c strtol.c swab.c swapon.c system.c
SRC_C += telldir.c time.c tmpfile.c tmpnam.c ttyname.c
SRC_C += tzset.c umount.c ungetc.c usleep.c utent.c utimes.c utsname.c
SRC_C += vfork.c vfprintf.c vprintf.c wait.c xitoa.c pathconf.c
SRC_C += gethostname.c sysconf.c confstr.c memccpy.c getpass.c
# ctype
SRC_C += isalnum.c isalpha.c isascii.c isblank.c iscntrl.c isdigit.c
SRC_C += isgraph.c islower.c isprint.c ispunct.c isspace.c isupper.c
SRC_C += isxdigit.c toupper.c tolower.c
# tty layer
SRC_C += tcgetattr.c tcsetattr.c tcdrain.c tcflow.c tcflush.c
SRC_C += cfmakeraw.c cfspeed.c revoke.c
# scanf
SRC_C += fscanf.c scanf.c sscanf.c vfscanf.c vscanf.c vsscanf.c
# Seems to give the compiler a hard time
#SRC_HARD += regexp.c
# Pieces we inherit in this case from the compiler library instead
SRC_C += strcpy.c strlen.c abs.c atof.c atoi.c atol.c labs.c
SRC_C += strcat.c strchr.c strcmp.c strcspn.c strncat.c strncmp.c
SRC_C += strncpy.c strpbrk.c strrchr.c strspn.c strstr.c strtok.c strtok_r.c
SRC_C += memchr.c memcmp.c memcpy.c memset.c memmove.c

SRC_CT += termcap.c tgetent.c

SRC_CURS = $(shell find curses -name '*.c')

SRC_RL = readline.c readline_fn.c

SRC_LM += acosf.c acoshf.c asinf.c asinhf.c atan2f.c atanf.c atanhf.c
SRC_LM += cbrtf.c ceilf.c copysignf.c erff.c expf.c expm1f.c
SRC_LM += fabsf.c fdimf.c floorf.c fmaxf.c fminf.c fmodf.c frexpf.c
SRC_LM += hypotf.c ilogbf.c j0f.c j1f.c jnf.c
SRC_LM += ldexpf.c lgammaf.c lgammaf_r.c logf.c log2f.c log10f.c logbf.c
SRC_LM += lrintf.c lroundf.c
SRC_LM += modff.c nearbyintf.c nextafterf.c powf.c
SRC_LM += remainderf.c remquof.c rintf.c roundf.c
SRC_LM += scalbnf.c scalbln.c
SRC_LM += sinf.c sincosf.c sinhf.c
SRC_LM += sqrtf.c tgammaf.c
SRC_LM += vfscanf_m.c vfprintf_m.c
SRC_LM += __expo2f.c __float_bits.c __fpclassifyf.c __log1pf.c __signgam.c
SRC_LM += __sin.c __cos.c __tan.c
SRC_LM += mathhelper.c


#remainder.c seems to crash gcc
#SRC_LM += acos.c acosh.c asin.c asinh.c atan2.c atan.c atanh.c
#SRC_LM += cbrt.c ceil.c copysign.c erf.c exp.c expm1.c
#SRC_LM += fabs.c fdim.c floor.c fmax.c fmin.c fmod.c frexp.c
#SRC_LM += hypot.c j0.c j1.c jn.c
#SRC_LM += ldexp.c lgamma.c lgamma_r.c log.c log2.c log10.c
#SRC_LM += lrint.c lround.c
#SRC_LM += modf.c nearbyint.c pow.c
#SRC_LM += remquo.c rint.c round.c
#SRC_LM += scalbn.c
#SRC_LM += sin.c sincos.c sinh.c
#SRC_LM += sqrt.c tgamma.c
#SRC_LM += __expo2.c __double_bits.c __fpclassify.c __log1p.c


OBJ_C = $(SRC_C:.c=.o)
OBJ_CURS = $(SRC_CURS:.c=.o)
OBJ_CT = $(SRC_CT:.c=.o)
OBJ_RL = $(SRC_RL:.c=.o)
OBJ_LM = $(SRC_LM:.c=.o)
OBJ_HARD = $(SRC_HARD:.c=.o)
OBJ_ALL = $(OBJ_ASM) $(OBJ_C) $(OBJ_HARD) $(OBJ_LM) $(OBJ_RL)

all: syslib.a $(OBJ_CRT0) curses.a \
     termcap.a readline.a

$(OBJ_ALL): $(KRN_HEADERS_COPY)

$(KRN_HEADERS_COPY): $(KRN_HEADERS_SRC)
	cp ../../Kernel/include/$(notdir $@) $@

6809/syscalls.s: 6809/mksyscalls.pl syscall.list
	(cd 6809; perl mksyscalls.pl)

libc.l:%.l:$(OBJ_C) $(OBJ_ASM) $(OBJ_HARD)
	ls $(OBJ_C) $(OBJ_ASM) $(OBJ_HARD)  > libc.l

#syslib.a: libc.l
#	cat libc.l > syslib.l
#	$(AR) rc syslib.a $$(cat syslib.l)
#	ln -sf syslib.a libc.a

syslib.a: $(OBJ_C) $(OBJ_ASM) $(OBJ_HARD)
	rm -f syslib.a libc.a
	$(AR) rc syslib.a `lorder6809 $(OBJ_C) $(OBJ_ASM) $(OBJ_HARD) | tsort`
	ln -sf syslib.a libc.a

fuzix/syslib.l: ../tools/syscall
	$<
	make -C fuzix

../tools/syscall: ../tools/syscall.c
	make -C .. tools/syscall

liberror.txt: ../tools/liberror
	$< -X > $@

../tools/liberror: ../tools/liberror.c
	make -C .. tools/liberror

curses.a: $(OBJ_CURS)
	$(AR) rc curses.a `lorder6809 $(OBJ_CURS) | tsort`
	ln -sf curses.a libcurses.a

termcap.a: $(OBJ_CT)
	$(AR) rc termcap.a `lorder6809 $(OBJ_CT) | tsort`
	ln -sf termcap.a libtermcap.a

m.a: $(OBJ_LM)
	$(AR) rc m.a `lorder6809 $(OBJ_LM) | tsort`
	ln -sf m.a libm.a

readline.a: $(OBJ_RL)
	$(AR) rc readline.a `lorder6809 $(OBJ_RL) | tsort`
	ln -sf readline.a libreadline.a

$(OBJ_ASM):%.o: %.s
	$(ASM) $(ASM_OPT) $@ $(@:.o=.s)

$(OBJ_CRT0):%.o: %.s
	$(ASM) $(ASM_OPT) $@ $(@:.o=.s)

$(OBJ_C):%.o: %.c
	$(CC) $(CC_OPT) $(@:.o=.c)

$(OBJ_CT):%.o: %.c
	$(CC) $(CC_OPT) $(@:.o=.c)

$(OBJ_CURS):%.o: %.c
	$(CC) $(CC_OPT) $(@:.o=.c) -o $@

$(OBJ_LM):%.o: %.c
	$(CC) $(CC_OPT) -DBUILD_LIBM $(@:.o=.c) -o $@

$(OBJ_HARD):%.o: %.c
	$(CC) $(CC_NOOPT) $(@:.o=.c)

$(OBJ_RL):%.o: %.c
	$(CC) $(CC_OPT) $(@:.o=.c)

clean:
	rm -f *.o *.asm *.sym *.lst *.a *~ syscall.l libc.l syslib.l \
	libc.a libm.a libtermcap.a \
	libcurses.a libreadline.a liberror.txt
	rm -f 6809/syscalls.s 6809/*.o
	-cd curses && rm -rf *.o *.asm *.sym *.lst *~

install: all
	cp 6809/crt*.o lib*.a /opt/fcc/lib/6809
	rm -f *.o *.a
